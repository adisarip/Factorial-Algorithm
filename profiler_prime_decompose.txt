1000
Wrote profile results to fact_05_prime_decompostion.py.lprof
Timer unit: 1e-06 s

Total time: 0.007484 s
File: fact_05_prime_decompostion.py
Function: calculate_factorial_prime_decompose at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           @profile
     3                                           def calculate_factorial_prime_decompose(number):
     4                                               '''
     5                                               This function takes one integer 
     6                                               agruments and return the factorial of the agruments.
     7                                           
     8                                               Since there are (number / ln number) prime number smaller than number
     9                                               so we can further reduce the total number of multiplication
    10                                           
    11                                               '''
    12         1            9      9.0      0.1      prime = [True]*(number + 1)
    13         1            1      1.0      0.0      result = 1
    14      1000          777      0.8     10.4      for i in xrange (2, number+1):
    15       999          819      0.8     10.9          if prime[i]:
    16                                                       #update prime table
    17       168          141      0.8      1.9              j = i+i
    18      2126         1439      0.7     19.2              while j <= number:
    19      1958         1516      0.8     20.3                  prime[j] = False
    20      1958         1329      0.7     17.8                  j += i
    21                                                       #calculate number of i in n!
    22       168          141      0.8      1.9              sum = 0
    23       168          129      0.8      1.7              t = i
    24       361          336      0.9      4.5              while t <= number:
    25       193          189      1.0      2.5                  sum += number/t
    26       193          178      0.9      2.4                  t *= i
    27       168          479      2.9      6.4              result *= i**sum
    28         1            1      1.0      0.0      return result

10000
Wrote profile results to fact_05_prime_decompostion.py.lprof
Timer unit: 1e-06 s

Total time: 0.061662 s
File: fact_05_prime_decompostion.py
Function: calculate_factorial_prime_decompose at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           @profile
     3                                           def calculate_factorial_prime_decompose(number):
     4                                               '''
     5                                               This function takes one integer 
     6                                               agruments and return the factorial of the agruments.
     7                                           
     8                                               Since there are (number / ln number) prime number smaller than number
     9                                               so we can further reduce the total number of multiplication
    10                                           
    11                                               '''
    12         1           72     72.0      0.1      prime = [True]*(number + 1)
    13         1            1      1.0      0.0      result = 1
    14     10000         4219      0.4      6.8      for i in xrange (2, number+1):
    15      9999         4582      0.5      7.4          if prime[i]:
    16                                                       #update prime table
    17      1229          609      0.5      1.0              j = i+i
    18     24300        11296      0.5     18.3              while j <= number:
    19     23071        12083      0.5     19.6                  prime[j] = False
    20     23071        11282      0.5     18.3                  j += i
    21                                                       #calculate number of i in n!
    22      1229          535      0.4      0.9              sum = 0
    23      1229          542      0.4      0.9              t = i
    24      2509         1226      0.5      2.0              while t <= number:
    25      1280          722      0.6      1.2                  sum += number/t
    26      1280          640      0.5      1.0                  t *= i
    27      1229        13853     11.3     22.5              result *= i**sum
    28         1            0      0.0      0.0      return result

100000
Wrote profile results to fact_05_prime_decompostion.py.lprof
Timer unit: 1e-06 s

Total time: 2.45769 s
File: fact_05_prime_decompostion.py
Function: calculate_factorial_prime_decompose at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           @profile
     3                                           def calculate_factorial_prime_decompose(number):
     4                                               '''
     5                                               This function takes one integer 
     6                                               agruments and return the factorial of the agruments.
     7                                           
     8                                               Since there are (number / ln number) prime number smaller than number
     9                                               so we can further reduce the total number of multiplication
    10                                           
    11                                               '''
    12         1          502    502.0      0.0      prime = [True]*(number + 1)
    13         1            0      0.0      0.0      result = 1
    14    100000        45063      0.5      1.8      for i in xrange (2, number+1):
    15     99999        45036      0.5      1.8          if prime[i]:
    16                                                       #update prime table
    17      9592         4729      0.5      0.2              j = i+i
    18    266400       120321      0.5      4.9              while j <= number:
    19    256808       140162      0.5      5.7                  prime[j] = False
    20    256808       124268      0.5      5.1                  j += i
    21                                                       #calculate number of i in n!
    22      9592         4265      0.4      0.2              sum = 0
    23      9592         4102      0.4      0.2              t = i
    24     19292         9521      0.5      0.4              while t <= number:
    25      9700         6400      0.7      0.3                  sum += number/t
    26      9700         5037      0.5      0.2                  t *= i
    27      9592      1948281    203.1     79.3              result *= i**sum
    28         1            1      1.0      0.0      return result

5000000
Wrote profile results to fact_05_prime_decompostion.py.lprof
Timer unit: 1e-06 s

Total time: 25.5838 s
File: fact_05_prime_decompostion.py
Function: calculate_factorial_prime_decompose at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           @profile
     3                                           def calculate_factorial_prime_decompose(number):
     4                                               '''
     5                                               This function takes one integer 
     6                                               agruments and return the factorial of the agruments.
     7                                           
     8                                               Since there are (number / ln number) prime number smaller than number
     9                                               so we can further reduce the total number of multiplication
    10                                           
    11                                               '''
    12         1        23364  23364.0      0.1      prime = [True]*(number + 1)
    13         1            3      3.0      0.0      result = 1
    14        22           66      3.0      0.0      for i in xrange (2, number+1):
    15        22           14      0.6      0.0          if prime[i]:
    16                                                       #update prime table
    17         9           10      1.1      0.0              j = i+i
    18   7494776      3512069      0.5     13.7              while j <= number:
    19   7494767      4044182      0.5     15.8                  prime[j] = False
    20   7494767      3818922      0.5     14.9                  j += i
    21                                                       #calculate number of i in n!
    22         9            6      0.7      0.0              sum = 0
    23         9            7      0.8      0.0              t = i
    24        87           40      0.5      0.0              while t <= number:
    25        78           50      0.6      0.0                  sum += number/t
    26        78           43      0.6      0.0                  t *= i
    27         9     14184975 1576108.3     55.4              result *= i**sum
    28                                               return result

1000000
Wrote profile results to fact_05_prime_decompostion.py.lprof
Timer unit: 1e-06 s

Total time: 340.023 s
File: fact_05_prime_decompostion.py
Function: calculate_factorial_prime_decompose at line 2

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     2                                           @profile
     3                                           def calculate_factorial_prime_decompose(number):
     4                                               '''
     5                                               This function takes one integer 
     6                                               agruments and return the factorial of the agruments.
     7                                           
     8                                               Since there are (number / ln number) prime number smaller than number
     9                                               so we can further reduce the total number of multiplication
    10                                           
    11                                               '''
    12         1         4877   4877.0      0.0      prime = [True]*(number + 1)
    13         1            3      3.0      0.0      result = 1
    14   1000000       869204      0.9      0.3      for i in xrange (2, number+1):
    15    999999       524601      0.5      0.2          if prime[i]:
    16                                                       #update prime table
    17     78498        67038      0.9      0.0              j = i+i
    18   2853708      1347038      0.5      0.4              while j <= number:
    19   2775210      1643109      0.6      0.5                  prime[j] = False
    20   2775210      1357964      0.5      0.4                  j += i
    21                                                       #calculate number of i in n!
    22     78498        45185      0.6      0.0              sum = 0
    23     78498        41973      0.5      0.0              t = i
    24    157232        81496      0.5      0.0              while t <= number:
    25     78734       130188      1.7      0.0                  sum += number/t
    26     78734        68734      0.9      0.0                  t *= i
    27     78498    333841843   4252.9     98.2              result *= i**sum
    28         1            1      1.0      0.0      return result

