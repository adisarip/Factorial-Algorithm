calculate_factorial_multi for n =  100
Wrote profile results to factorial_02_multi.py.lprof
Timer unit: 1e-06 s

Total time: 9.5e-05 s
File: factorial_02_multi.py
Function: calculate_factorial_multi at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def calculate_factorial_multi(number):
    16                                           	'''
    17                                           	This function takes one agruments and
    18                                           	returns the factorials of that number
    19                                           	This is not a naive recursive approach.
    20                                           	'''
    21                                           	
    22                                           	'''
    23                                           	If 0 or 1 retrun immediately
    24                                           	''' 
    25         1            1      1.0      1.1  	if number == 1 or number == 0:
    26                                           		return 1
    27                                           	
    28         1            1      1.0      1.1  	result = 1 # variable to hold the result
    29                                           	
    30       101           41      0.4     43.2  	for x in xrange(1, number + 1, 1):
    31       100           52      0.5     54.7  		result *= x
    32         1            0      0.0      0.0  	return result

calculate_factorial_multi for n =  1000
Wrote profile results to factorial_02_multi.py.lprof
Timer unit: 1e-06 s

Total time: 0.001115 s
File: factorial_02_multi.py
Function: calculate_factorial_multi at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def calculate_factorial_multi(number):
    16                                           	'''
    17                                           	This function takes one agruments and
    18                                           	returns the factorials of that number
    19                                           	This is not a naive recursive approach.
    20                                           	'''
    21                                           	
    22                                           	'''
    23                                           	If 0 or 1 retrun immediately
    24                                           	''' 
    25         1            2      2.0      0.2  	if number == 1 or number == 0:
    26                                           		return 1
    27                                           	
    28         1            0      0.0      0.0  	result = 1 # variable to hold the result
    29                                           	
    30      1001          394      0.4     35.3  	for x in xrange(1, number + 1, 1):
    31      1000          718      0.7     64.4  		result *= x
    32         1            1      1.0      0.1  	return result

calculate_factorial_multi for n =  10000
Wrote profile results to factorial_02_multi.py.lprof
Timer unit: 1e-06 s

Total time: 0.035327 s
File: factorial_02_multi.py
Function: calculate_factorial_multi at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def calculate_factorial_multi(number):
    16                                           	'''
    17                                           	This function takes one agruments and
    18                                           	returns the factorials of that number
    19                                           	This is not a naive recursive approach.
    20                                           	'''
    21                                           	
    22                                           	'''
    23                                           	If 0 or 1 retrun immediately
    24                                           	''' 
    25         1            1      1.0      0.0  	if number == 1 or number == 0:
    26                                           		return 1
    27                                           	
    28         1            0      0.0      0.0  	result = 1 # variable to hold the result
    29                                           	
    30     10001         3966      0.4     11.2  	for x in xrange(1, number + 1, 1):
    31     10000        31360      3.1     88.8  		result *= x
    32         1            0      0.0      0.0  	return result

calculate_factorial_multi for n =  100000
Wrote profile results to factorial_02_multi.py.lprof
Timer unit: 1e-06 s

Total time: 3.77454 s
File: factorial_02_multi.py
Function: calculate_factorial_multi at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def calculate_factorial_multi(number):
    16                                           	'''
    17                                           	This function takes one agruments and
    18                                           	returns the factorials of that number
    19                                           	This is not a naive recursive approach.
    20                                           	'''
    21                                           	
    22                                           	'''
    23                                           	If 0 or 1 retrun immediately
    24                                           	''' 
    25         1            1      1.0      0.0  	if number == 1 or number == 0:
    26                                           		return 1
    27                                           	
    28         1            0      0.0      0.0  	result = 1 # variable to hold the result
    29                                           	
    30    100001        46157      0.5      1.2  	for x in xrange(1, number + 1, 1):
    31    100000      3728380     37.3     98.8  		result *= x
    32         1            1      1.0      0.0  	return result


