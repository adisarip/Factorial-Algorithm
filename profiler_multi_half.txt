Calculating Half Time for the number =  1000
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 0.00115 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            1      1.0      0.1  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      0.1  	handle_odd = False
    49         1            1      1.0      0.1  	upto_number = number
    50                                           	
    51         1            1      1.0      0.1  	if number & 1 == 1:
    52                                           		upto_number -= 1
    53                                           		print upto_number
    54                                           		handle_odd = True
    55                                           
    56         1            0      0.0      0.0  	next_sum = upto_number
    57         1            0      0.0      0.0  	next_multi = upto_number
    58         1            1      1.0      0.1  	factorial = 1
    59                                           	
    60       501          233      0.5     20.3  	while next_sum >= 2:
    61       500          409      0.8     35.6  		factorial *= next_multi
    62       500          245      0.5     21.3  		next_sum -= 2
    63       500          254      0.5     22.1  		next_multi += next_sum
    64                                           
    65         1            3      3.0      0.3  	if handle_odd:
    66                                           		factorial *= number
    67                                           
    68         1            1      1.0      0.1  	return factorial

Calculating Half Time for the number =  100
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 0.000104 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            1      1.0      1.0  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      1.0  	handle_odd = False
    49         1            1      1.0      1.0  	upto_number = number
    50                                           	
    51         1            1      1.0      1.0  	if number & 1 == 1:
    52                                           		upto_number -= 1
    53                                           		print upto_number
    54                                           		handle_odd = True
    55                                           
    56         1            1      1.0      1.0  	next_sum = upto_number
    57         1            1      1.0      1.0  	next_multi = upto_number
    58         1            0      0.0      0.0  	factorial = 1
    59                                           	
    60        51           21      0.4     20.2  	while next_sum >= 2:
    61        50           28      0.6     26.9  		factorial *= next_multi
    62        50           21      0.4     20.2  		next_sum -= 2
    63        50           28      0.6     26.9  		next_multi += next_sum
    64                                           
    65         1            0      0.0      0.0  	if handle_odd:
    66                                           		factorial *= number
    67                                           
    68         1            0      0.0      0.0  	return factorial

Calculating Half Time for the number =  10000
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 0.023636 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            2      2.0      0.0  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      0.0  	handle_odd = False
    49         1            0      0.0      0.0  	upto_number = number
    50                                           	
    51         1            1      1.0      0.0  	if number & 1 == 1:
    52                                           		upto_number -= 1
    53                                           		print upto_number
    54                                           		handle_odd = True
    55                                           
    56         1            1      1.0      0.0  	next_sum = upto_number
    57         1            1      1.0      0.0  	next_multi = upto_number
    58         1            0      0.0      0.0  	factorial = 1
    59                                           	
    60      5001         2215      0.4      9.4  	while next_sum >= 2:
    61      5000        16578      3.3     70.1  		factorial *= next_multi
    62      5000         2461      0.5     10.4  		next_sum -= 2
    63      5000         2374      0.5     10.0  		next_multi += next_sum
    64                                           
    65         1            1      1.0      0.0  	if handle_odd:
    66                                           		factorial *= number
    67                                           
    68         1            1      1.0      0.0  	return factorial

Calculating Half Time for the number =  100000
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 3.65019 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            1      1.0      0.0  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      0.0  	handle_odd = False
    49         1            0      0.0      0.0  	upto_number = number
    50                                           	
    51         1            1      1.0      0.0  	if number & 1 == 1:
    52                                           		upto_number -= 1
    53                                           		print upto_number
    54                                           		handle_odd = True
    55                                           
    56         1            1      1.0      0.0  	next_sum = upto_number
    57         1            1      1.0      0.0  	next_multi = upto_number
    58         1            1      1.0      0.0  	factorial = 1
    59                                           	
    60     50001        22395      0.4      0.6  	while next_sum >= 2:
    61     50000      3571928     71.4     97.9  		factorial *= next_multi
    62     50000        31640      0.6      0.9  		next_sum -= 2
    63     50000        24225      0.5      0.7  		next_multi += next_sum
    64                                           
    65         1            0      0.0      0.0  	if handle_odd:
    66                                           		factorial *= number
    67                                           
    68         1            1      1.0      0.0  	return factorial

Calculating Half Time for the number =  100000
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 3.65056 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            2      2.0      0.0  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      0.0  	handle_odd = False
    49         1            0      0.0      0.0  	upto_number = number
    50                                           	
    51         1            1      1.0      0.0  	if number & 1 == 1:
    52                                           		upto_number -= 1
    53                                           		print upto_number
    54                                           		handle_odd = True
    55                                           
    56         1            1      1.0      0.0  	next_sum = upto_number
    57         1            1      1.0      0.0  	next_multi = upto_number
    58         1            1      1.0      0.0  	factorial = 1
    59                                           	
    60     50001        22596      0.5      0.6  	while next_sum >= 2:
    61     50000      3571126     71.4     97.8  		factorial *= next_multi
    62     50000        32455      0.6      0.9  		next_sum -= 2
    63     50000        24376      0.5      0.7  		next_multi += next_sum
    64                                           
    65         1            1      1.0      0.0  	if handle_odd:
    66                                           		factorial *= number
    67                                           
    68         1            0      0.0      0.0  	return factorial

Calculating Half Time for the number =  99999
99998
Wrote profile results to factorial_03_multi_half.py.lprof
Timer unit: 1e-06 s

Total time: 3.63338 s
File: factorial_03_multi_half.py
Function: calculate_factorial_multi_half at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def calculate_factorial_multi_half(number):
    13                                           	
    14                                           	'''
    15                                           
    16                                           	This function takes one agruments and
    17                                           	returns the factorials of that number
    18                                           
    19                                           	This function make use of the fact that we can reduce the multiplication in factorial
    20                                           	by half, for even number
    21                                           	
    22                                           	Multiplication is an expensive operation so replacing multplication with addition 
    23                                           	we are reduction the strength.Strength Reduction is a Process most often used
    24                                           	by the compiler.
    25                                           
    26                                           	Lets calculate 8!
    27                                           
    28                                           	so 8! = 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 -	let group them together:
    29                                           
    30                                           	8! = (8 * 1) * (7 * 2) * (6 * 3) * (5 * 4)
    31                                           
    32                                           	Which can be written as
    33                                           
    34                                           	8! = 8 * (8 + 6 = 14) * (14 + 4 = 18) * (18 + 2)
    35                                           		so first factor is the number we are taking. second factor is the first factor 
    36                                           		plus first factor minus two from the factor
    37                                           		and then in next we add the result with substarcted result.
    38                                           
    39                                           	Odd number also follows the same pattern till even just handle the case of one odd
    40                                           	'''
    41                                           
    42                                           	'''
    43                                           	return immediately if number is 0 or 1
    44                                           	'''
    45         1            1      1.0      0.0  	if number == 1 or number == 0:
    46                                           		return 1
    47                                           
    48         1            1      1.0      0.0  	handle_odd = False
    49         1            1      1.0      0.0  	upto_number = number
    50                                           	
    51         1            0      0.0      0.0  	if number & 1 == 1:
    52         1            0      0.0      0.0  		upto_number -= 1
    53         1            1      1.0      0.0  		print upto_number
    54         1            1      1.0      0.0  		handle_odd = True
    55                                           
    56         1            0      0.0      0.0  	next_sum = upto_number
    57         1            0      0.0      0.0  	next_multi = upto_number
    58         1            0      0.0      0.0  	factorial = 1
    59                                           	
    60     50000        22847      0.5      0.6  	while next_sum >= 2:
    61     49999      3554086     71.1     97.8  		factorial *= next_multi
    62     49999        31963      0.6      0.9  		next_sum -= 2
    63     49999        24366      0.5      0.7  		next_multi += next_sum
    64                                           
    65         1            1      1.0      0.0  	if handle_odd:
    66         1          114    114.0      0.0  		factorial *= number
    67                                           
    68         1            1      1.0      0.0  	return factorial

